# -*- coding: utf-8 -*-
"""DataEye.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbPeKNWvfJEAVz3pX1Ii_41d12b3zms9
"""

import pandas as pd
import math
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
import scipy.io
from scipy import interpolate
import matplotlib.pyplot as plt
import tensorflow
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN

labels = scipy.io.loadmat('/content/labels.mat')['labels']
ball_data = scipy.io.loadmat('/content/data_ball_xy.mat')['data_ball_xy']
eye_data = scipy.io.loadmat('/content/data_eye_xy.mat')['data_eye_xy']

unusable_data=set()

for i in range(len(eye_data)):
    y = eye_data[i]
    a = y[:,0]
    good_data = a[np.logical_not(np.isnan(a))]
    if len(good_data)<len(a)*(0.8):
        unusable_data.add(i)
        continue
    a[np.isnan(a)] = np.interp(np.isnan(a).nonzero()[0], np.logical_not(np.isnan(a)).nonzero()[0], good_data)
    a = y[:,1]
    a[np.isnan(a)] = np.interp(np.isnan(a).nonzero()[0], np.logical_not(np.isnan(a)).nonzero()[0], good_data)

X = np.zeros(shape=(len(ball_data)-len(unusable_data),len(ball_data[0])))
print(X.shape)
c=0
for i in range(len(ball_data)):
    if i in unusable_data:
        continue
    for j in range(len(ball_data[0])):
        X[c][j]=math.sqrt((ball_data[i][j][0]-eye_data[i][j][0])**2+(ball_data[i][j][1]-eye_data[i][j][1])**2)
    c+=1

r=np.random.randint(low = 0, high = len(X), size = 1)
t=r[0]
plt.scatter(ball_data[t,:,0],ball_data[t,:,1], color='green')
plt.scatter(eye_data[t,:,0],eye_data[t,:,1], color='red')
plt.title(f"{labels[t]}")
plt.show()
plt.scatter(np.arange(len(X[r[0]])),X[r[0]])
plt.title(f"{labels[r[0]]}")
plt.show()

Y = np.array([labels[i][0] for i in range(len(labels)) if i not in unusable_data])

x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2)

# model=Sequential()
# model.add(SimpleRNN(units=len(x_train)))
# model.add(Dense(units=len(x_train),activation='relu'))
# model.add(Dense(units=len(X),activation='relu'))
# model.add(Dense(units=1,activation='sigmoid'))
# model.compile(loss='binary_crossentropy',optimizer='sgd',metrics='accuracy')
# model.fit(x_train,y_train,epochs=10)
# y_pred=model.predict(x_test)
# y_pred=np.array([val if val<0.5 else 1 for val in y_pred])

# SVCclassifier=SVC(kernel='linear')
# SVCclassifier=SVC(kernel='poly')
SVCclassifier=SVC(kernel='rbf')
# SVCclassifier=SVC(kernel='sigmoid')
SVCclassifier.fit(x_train,y_train)
y_pred=SVCclassifier.predict(x_test)

# logreg= LogisticRegression(max_iter=100,C=0.6,solver='saga',multi_class='ovr')
# logreg.fit(x_train,y_train)
# y_pred=logreg.predict(x_test)

print(y_test)
print(y_pred)
print(classification_report(y_test,y_pred))

